image: registry.gitcity.eu/gitcity-sk/gitcity-build-images:php-7.2-fpm

stages:
    - build
    - prepare
    - test
    - post-test
    - pages
    - post-cleanup
    - deploy

# Pages section
# ----------------------------------

# Tags
.run-on-do-docker: &run-on-do-docker
    tags:
        - digitalocean
        - docker

.run-on-staging: &run-on-staging
    tags:
        - digitalocean
        - staging

# Cache section
# ----------------------------------

# Cache configuration
.default-cache: &default-cache
    paths:
        - vendor/
        - storage/

.push-cache-dev: &push-cache-dev
    cache:
        <<: *default-cache
        key: "cake-app-with-php-7-dev"
        policy: push

.pull-cache-dev: &pull-cache-dev
    cache:
        <<: *default-cache
        key: "cake-app-with-php-7-dev"
        policy: pull

# Services section
# ----------------------------------

# Services configuration
.postgres-variables: &postgres-service
    variables:
        POSTGRES_PASSWORD: "5RGGjwubxdqyF6dL"
        POSTGRES_DB: homestead
    services:
        - postgres

.mysql-variables: &mysql-service
    variables:
        MYSQL_USER: homestead
        MYSQL_DATABASE: homestead
        MYSQL_PASSWORD: "5RGGjwubxdqyF6dL"
        MYSQL_ROOT_PASSWORD: "5RGGjwubxdqyF6dL"
    services:
        - mariadb

# Tests section
# ----------------------------------

# PHP UNIT tests configuration
.phpunit-tests: &phpunit-tests
    stage: test
    script:
        - php artisan key:generate
        - php artisan config:cache
        - phpunit --coverage-text --colors=never
    retry: 2
    artifacts:
        untracked: true
        paths:
            - ./storage/logs
        when: on_failure
        expire_in: 1 week

.phpunit-html-coverage: &phpunit-html-coverage
    stage: pages
    environment:
        name: code-coverage/$CI_COMMIT_REF_NAME
        url: http://$CI_PROJECT_NAMESPACE.gitcity.io/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG/coverage/
    script:
        - php artisan key:generate
        - php artisan config:cache
        - phpunit --coverage-html ./public/$CI_COMMIT_REF_SLUG/coverage

.phpunit-codecov-html: &phpunit-codecov-html
    stage: post-test
    script:
        - php artisan key:generate
        - php artisan config:cache
        - phpunit --coverage-clover=coverage.xml

.phpunit-pg-tests: &phpunit-pg-tests
    <<: *postgres-service
    <<: *pull-cache-dev
    <<: *run-on-do-docker
    <<: *phpunit-tests
    before_script:
        - cp .env.testing.pgsql .env
        
.phpunit-mysql-tests: &phpunit-mysql-tests
    <<: *mysql-service
    <<: *pull-cache-dev
    <<: *run-on-do-docker
    <<: *phpunit-tests
    before_script:
        - cp .env.testing.mysql .env

# Post test section
# ----------------------------------

# PHPCS configuration
.phpcs-tests: &phpcs-tests
    <<: *pull-cache-dev
    <<: *run-on-do-docker
    stage: post-test
    script:
        - chmod +x vendor/bin/phpcs
        - vendor/bin/phpcs -p --extensions=php --standard=vendor/cakephp/cakephp-codesniffer/CakePHP ./app ./tests ./routes ./database
    allow_failure: true

.dusk: &dusk
    <<: *postgres-service
    <<: *pull-cache-dev
    <<: *run-on-do-docker
    image: registry.gitcity.eu/gitcity-sk/gitcity-build-images:php-7.2-nginx-laravel-dusk-node
    stage: test
    before_script:
        - cp .env.dusk.pgsql .env
        - composer require --dev laravel/dusk
    script:
        - configure-laravel
        - start-nginx-ci-project
        - php artisan dusk --colors --debug
    allow_failure: true

# ------------------------
# End Configuration part
# ------------------------

# Prepare section
# ----------------------------------

# Prepare
composer-install-dev:
    <<: *run-on-do-docker
    <<: *push-cache-dev
    stage: prepare
    script:
        - chmod +x ./prepare.sh
        - ./prepare.sh dev pgsql

# Tests section
# ----------------------------------

# Tests
phpunit-pg-tests 1 1: *phpunit-pg-tests
phpunit-mysql-tests 1 1: *phpunit-mysql-tests
laravel-dusk-test: *dusk

# Post tests section section
# ----------------------------------

# Post Test
phpcs-tests 1 1: *phpcs-tests

# Push coverage to codecov.io
codecov:
    <<: *postgres-service
    <<: *pull-cache-dev
    <<: *run-on-do-docker
    <<: *phpunit-codecov-html
    before_script:
        - cp .env.testing.pgsql .env
    after_script:
        - bash <(curl -s https://codecov.io/bash) -t "$CODECOV_TOKEN"

# Pages section
# ----------------------------------

# Deploy page
pages:
    <<: *postgres-service
    <<: *pull-cache-dev
    <<: *run-on-do-docker
    <<: *phpunit-html-coverage
    before_script:
        - cp .env.testing.pgsql .env
    artifacts:
        paths:
        - public

# Build section
# ----------------------------------

# Build master image (latest)
build master image:
    image: docker:latest
    services:
        - docker:dind
    stage: build
    before_script:
        - echo "$CI_JOB_TOKEN" | docker login -u "gitlab-ci-token" "$CI_REGISTRY" --password-stdin
    script:
        - docker build --pull -t "$CI_REGISTRY_IMAGE" .
        - docker push "$CI_REGISTRY_IMAGE"
    <<: *run-on-do-docker
    only:
        - master
    when: manual

# Build everything else
build image:
    image: docker:latest
    services:
        - docker:dind
    stage: build
    before_script:
        - echo "$CI_JOB_TOKEN" | docker login -u "gitlab-ci-token" "$CI_REGISTRY" --password-stdin
    script:
        - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" .
        - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
    <<: *run-on-do-docker
    except:
        - master
    when: manual

# Deploy section
# ----------------------------------

# Deploy latest image to docker
deploy:to-docker-cloud:
    image: docker:latest
    services:
        - docker:dind
    stage: deploy
    environment:
        name: release/latest
        url: https://hub.docker.com/r/maymeow/webapp-ce/tags/
    before_script:
        - echo "$CI_JOB_TOKEN" | docker login -u "gitlab-ci-token" "$CI_REGISTRY" --password-stdin
        - echo "$CLOUD_REGISTRY_SECRET" | docker login -u "maymeow" --password-stdin
    script:
        - docker pull "$CI_REGISTRY_IMAGE"
        - docker tag "$CI_REGISTRY_IMAGE" maymeow/webapp-ce:latest
        - docker push maymeow/webapp-ce:latest
    <<: *run-on-do-docker
    only:
        - master
    when: manual

# Deploy Tagged image to docker
deploy:tags-to-docker-cloud:
    image: docker:latest
    services:
        - docker:dind
    stage: deploy
    environment:
        name: release/$CI_COMMIT_REF_NAME
        url: https://hub.docker.com/r/maymeow/webapp-ce/tags/
    before_script:
        - echo "$CI_JOB_TOKEN" | docker login -u "gitlab-ci-token" "$CI_REGISTRY" --password-stdin
        - echo "$CLOUD_REGISTRY_SECRET" | docker login -u "maymeow" --password-stdin
    script:
        - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
        - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" "maymeow/webapp-ce:$CI_COMMIT_REF_NAME"
        - docker push "maymeow/webapp-ce:$CI_COMMIT_REF_NAME"
    <<: *run-on-do-docker
    only:
        - tags
    when: manual

deplloy:review-webapp:
    <<: *run-on-staging
    stage: deploy
    environment:
        name: review-webapp/$CI_COMMIT_REF_NAME
        url: http://167.99.34.153
        on_stop: stop-review-webapp
    before_script:
        - docker-compose --version
        - echo "$CI_JOB_TOKEN" | docker login -u "gitlab-ci-token" "$CI_REGISTRY" --password-stdin
    script:
        - docker-compose build
        - docker-compose up -d
    only:
        - master
    when: manual

stop-review-webapp:
    <<: *run-on-staging
    stage: post-cleanup
    environment:
        name: review-webapp/$CI_COMMIT_REF_NAME
        action: stop
    script:
        - docker-compose down -v
        - docker rmi registry.gitcity.eu/webapp/webapp-ce:latest
        - docker logout "$CI_REGISTRY"
    only:
        - master
    when: manual